{
  "$defs": {
    "AWSRegion": {
      "enum": [
        "us-east-2",
        "us-east-1",
        "us-west-1",
        "us-west-2",
        "af-south-1",
        "ap-east-1",
        "ap-south-1",
        "ap-northeast-3",
        "ap-northeast-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "ca-central-1",
        "cn-north-1",
        "cn-northwest-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-south-1",
        "eu-west-3",
        "eu-north-1",
        "me-south-1",
        "sa-east-1"
      ],
      "title": "AWSRegion",
      "type": "string"
    },
    "AuthenticationVariable": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the variable",
          "title": "Name",
          "type": "string"
        },
        "value": {
          "description": "The value of the variable",
          "title": "Value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "AuthenticationVariable",
      "type": "object"
    },
    "BasicPreset": {
      "_doc": {
        "description": "The 'Basic' authentication preset is designed for straightforward authentication scenarios:\n\n- **Credentials Encoding**: User's credentials (username and password) are encoded in **base64**.\n- **Header Attachment**: The encoded credentials are attached to the request headers.\n- **Authorization Header**: The client sends these credentials in the **Authorization** header of the HTTP request.\n\nThis method provides a simple and direct way to authenticate users, without requiring additional server requests for user creation or authentication. It is best suited for scenarios where simplicity and ease of implementation are prioritized.\n\n**Note**: While this method is straightforward, it's less secure compared to more advanced authentication methods.",
        "examples": [
          {
            "type": "basic",
            "users": [
              {
                "password": "pass1",
                "username": "user1"
              },
              {
                "password": "pass2",
                "username": "user2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "Basic"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "basic",
          "default": "basic",
          "title": "Type"
        },
        "users": {
          "description": "A list of users with basic credentials to create",
          "items": {
            "$ref": "#/$defs/BasicUserPreset"
          },
          "title": "Users",
          "type": "array"
        }
      },
      "required": [
        "users"
      ],
      "title": "BasicPreset",
      "type": "object"
    },
    "BasicUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The Basic username of the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "password": {
          "description": "The Basic password of the user.",
          "title": "Password",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "title": "BasicUserPreset",
      "type": "object"
    },
    "CognitoUserpassPreset": {
      "_doc": {
        "description": "The 'Cognito User Password' preset is designed for authentication using AWS Cognito with username and password credentials:\n\n- **AWS Cognito Integration**: Leverages AWS Cognito, a comprehensive user identity and data synchronization service, for authentication.\n- **Regional Configuration**: Allows specifying the AWS region where the Cognito service is hosted, ensuring proper routing and compliance with data residency requirements.\n- **Client Credentials**: Utilizes a client ID and client secret for secure OAuth requests within the Cognito framework.\n- **User Authentication**: Facilitates the creation and authentication of users with a username and password.\n\nThis preset is ideal for systems that use AWS Cognito for managing user authentication, providing a seamless integration with the AWS ecosystem.",
        "examples": [
          {
            "client_id": "yourCognitoClientId",
            "client_secret": "yourCognitoClientSecret",
            "region": "us-west-1",
            "type": "cognito_userpass",
            "users": [
              {
                "password": "pass1",
                "scopes": [
                  "create",
                  "delete"
                ],
                "username": "user1"
              },
              {
                "password": "pass2",
                "scopes": null,
                "username": "user2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "AWS Cognito User Password"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "cognito_userpass",
          "default": "cognito_userpass",
          "title": "Type"
        },
        "users": {
          "description": "A list of users to create",
          "items": {
            "$ref": "#/$defs/CognitoUserpassUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "region": {
          "allOf": [
            {
              "$ref": "#/$defs/AWSRegion"
            }
          ],
          "description": "The region of the Cognito Service."
        },
        "client_id": {
          "description": "The client ID to use for the OAuth requests",
          "title": "Client Id",
          "type": "string"
        },
        "client_secret": {
          "description": "The client secret to use for the OAuth requests",
          "title": "Client Secret",
          "type": "string"
        }
      },
      "required": [
        "users",
        "region",
        "client_id",
        "client_secret"
      ],
      "title": "CognitoUserpassPreset",
      "type": "object"
    },
    "CognitoUserpassUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The username of the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "password": {
          "description": "The password of the user.",
          "title": "Password",
          "type": "string"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A list of scopes to request for the user. If not specified, no scopes will be requested.",
          "title": "Scopes"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "title": "CognitoUserpassUserPreset",
      "type": "object"
    },
    "Credentials": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The username to attach to the HTTP requests sent for this user. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#access_using_credentials_in_the_url",
          "examples": [
            "john"
          ],
          "title": "Username"
        },
        "password": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The password to attach to the HTTP requests sent for this user. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#access_using_credentials_in_the_url",
          "examples": [
            "john@password123#"
          ],
          "title": "Password"
        },
        "headers": {
          "description": "A list of headers to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "name": "Authorization",
              "values": [
                "Bearer ..."
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPHeader"
          },
          "title": "Headers",
          "type": "array"
        },
        "cookies": {
          "description": "A list of cookies to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "name": "PHPSESSIONID",
              "values": [
                "..."
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPCookie"
          },
          "title": "Cookies",
          "type": "array"
        },
        "query_parameters": {
          "description": "A list of query parameters to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "name": "token",
              "values": [
                "..."
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPQueryParameter"
          },
          "title": "Query Parameters",
          "type": "array"
        },
        "body": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A body to merge with the bodies of every HTTP requests sent for this user",
          "examples": [
            {
              "password": "john@password123#",
              "username": "john"
            },
            "username=john&password=john%40password123%23"
          ],
          "title": "Body"
        }
      },
      "title": "Credentials",
      "type": "object"
    },
    "DigestPreset": {
      "_doc": {
        "description": "The 'Digest' authentication preset employs a challenge-response mechanism for enhanced security:\n\n- **Initial Request**: Involves sending a request to a server endpoint that responds with a `WWW-Authenticate` header, initiating the authentication process.\n- **Credentials Processing**: The client creates a hashed version of the user's credentials using the challenge details received.\n- **Second Request**: The client sends a second request with this hashed information to authenticate.\n\nThis method enhances security by avoiding the transmission of actual passwords over the network.\nDigest Authentication is suitable for scenarios requiring enhanced security without the complexities of more advanced authentication methods.",
        "examples": [
          {
            "first_request": {
              "cookies": {
                "session_id": "123456"
              },
              "headers": {
                "Accept": "application/json"
              },
              "method": "GET",
              "query_parameters": {
                "query": "info"
              },
              "url": "https://api.example.com/request"
            },
            "second_request": {
              "method": "POST",
              "url": "https://api.example.com/authenticate"
            },
            "type": "digest",
            "users": [
              {
                "password": "aliceSecret",
                "username": "alice"
              },
              {
                "password": "bobSecret",
                "username": "bob"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "Digest"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "digest",
          "default": "digest",
          "title": "Type"
        },
        "users": {
          "description": "The list of users to generate tokens for.",
          "items": {
            "$ref": "#/$defs/BasicUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "first_request": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPRequestPreset"
            }
          ],
          "description": "The parameters of the first HTTP request executed during the digest procedure.It is the one that returns the WWW-Authenticate header.",
          "examples": [
            {
              "method": "GET",
              "url": "https://my-api.com"
            },
            {
              "body": {
                "key1": "value1",
                "key2": "value2"
              },
              "headers": [
                {
                  "name": "Content-Type",
                  "values": [
                    "application/json"
                  ]
                }
              ],
              "url": "https://my-api.com"
            }
          ]
        },
        "second_request": {
          "anyOf": [
            {
              "$ref": "#/$defs/DigestSecondRequestConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The parameters of the second HTTP request executed during the digest procedure.It is the one that uses the digest authentication. By default, parameters of the first request are used.",
          "examples": [
            {
              "method": "POST",
              "url": "https://auth.example.com/digest"
            }
          ]
        }
      },
      "required": [
        "users",
        "first_request"
      ],
      "title": "DigestPreset",
      "type": "object"
    },
    "DigestRequestSequenceConfiguration": {
      "additionalProperties": false,
      "properties": {
        "first_request": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPRequestParameters"
            }
          ],
          "description": "The parameters of the first HTTP request executed during the digest procedure.It is the one that returns the WWW-Authenticate header.",
          "examples": [
            {
              "method": "GET",
              "url": "https://my-api.com"
            },
            {
              "body": {
                "key1": "value1",
                "key2": "value2"
              },
              "headers": [
                {
                  "name": "Content-Type",
                  "values": [
                    "application/json"
                  ]
                }
              ],
              "url": "https://my-api.com"
            }
          ]
        },
        "second_request": {
          "anyOf": [
            {
              "$ref": "#/$defs/DigestSecondRequestConfiguration"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The parameters of the second HTTP request executed during the digest procedure.It is the one that uses the digest authentication. By default, parameters of the first request are used.",
          "examples": [
            {
              "method": "POST",
              "url": "https://auth.example.com/digest"
            }
          ]
        }
      },
      "required": [
        "first_request"
      ],
      "title": "DigestRequestSequenceConfiguration",
      "type": "object"
    },
    "DigestRunnerConfiguration": {
      "additionalProperties": false,
      "properties": {
        "tech": {
          "const": "digest",
          "default": "digest",
          "title": "Tech"
        },
        "parameters": {
          "allOf": [
            {
              "$ref": "#/$defs/DigestRequestSequenceConfiguration"
            }
          ],
          "description": "The parameters of the HTTP requests executed during the digest procedure.It features two HTTP requests: the first one is the one that returns the WWW-Authenticate header,and the second one is the one that uses the digest authentication.",
          "examples": [
            {
              "first_request": {
                "headers": [
                  {
                    "name": "Accept",
                    "values": [
                      "*/*"
                    ]
                  }
                ],
                "method": "GET",
                "url": "https://example.com"
              }
            },
            {
              "first_request": {
                "headers": [
                  {
                    "name": "Accept",
                    "values": [
                      "*/*"
                    ]
                  }
                ],
                "method": "GET",
                "url": "https://example.com"
              },
              "second_request": {
                "method": "GET",
                "url": "/digest"
              }
            }
          ]
        },
        "extractions": {
          "items": {
            "$ref": "#/$defs/TokenExtraction"
          },
          "title": "Extractions",
          "type": "array"
        }
      },
      "required": [
        "parameters",
        "extractions"
      ],
      "title": "DigestRunnerConfiguration",
      "type": "object"
    },
    "DigestSecondRequestConfiguration": {
      "additionalProperties": false,
      "properties": {
        "url": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The URL of the second HTTP request executed during the digest procedure.By default, the URL of the first request is used.",
          "title": "Url"
        },
        "method": {
          "anyOf": [
            {
              "$ref": "#/$defs/HTTPMethod"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The method of the second HTTP request executed during the digest procedure.By default, the method of the first request is used.",
          "examples": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS",
            "HEAD",
            "TRACE",
            "CONNECT"
          ]
        }
      },
      "title": "DigestSecondRequestConfiguration",
      "type": "object"
    },
    "GraphQLPreset": {
      "_doc": {
        "description": "The 'GraphQL' authentication preset facilitates authentication through GraphQL queries:\n\n- **GraphQL Endpoint**: The authentication is performed against a specified GraphQL endpoint.\n- **Query Templating**: Utilizes a templated GraphQL query for authentication requests.\n- **Variable Handling**: User credentials are passed as variables within the GraphQL query.\n- **Token Extraction**: Specifies how and where to extract authentication tokens (e.g., from the response body).\n- **Token Injection**: Defines how to inject the extracted token into subsequent requests.\n\nThis preset is ideal for systems where authentication is managed via GraphQL APIs, allowing for flexible and powerful authentication mechanisms.",
        "examples": [
          {
            "extract": {
              "key": "accessToken",
              "location": "body"
            },
            "inject": {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer"
            },
            "query": "mutation($login: String!, $password: String!) {\n   authenticate(login: $login, password: $password) {\n       accessToken\n   }\n}",
            "type": "graphql",
            "url": "https://api.example.com/graphql-auth",
            "users": [
              {
                "username": "user1",
                "variables": {
                  "login": "user1",
                  "password": "pass1"
                }
              },
              {
                "username": "user2",
                "variables": {
                  "login": "user2",
                  "password": "pass2"
                }
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "GraphQL"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "graphql",
          "default": "graphql",
          "title": "Type"
        },
        "users": {
          "description": "A list of users with credentials contained in the GraphQL `variables` of the query",
          "items": {
            "$ref": "#/$defs/GraphQLUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "url": {
          "description": "The URL of the GraphQL authentication endpoint.",
          "title": "Url",
          "type": "string"
        },
        "query": {
          "description": "The templated GraphQL inside the `query` field of the JSON body of the HTTP request.",
          "examples": [
            "mutation($username: String!, $password: String!) {\n   login(username: $username, password: $password) {\n       access_token\n       refresh_token\n   }\n}",
            "query { __typename }"
          ],
          "title": "Query",
          "type": "string"
        },
        "extract": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenExtraction"
            }
          ],
          "default": {
            "location": "body",
            "key": "token",
            "regex": null,
            "name": "token"
          },
          "description": "The extraction of the GraphQL query containing the user credentials."
        },
        "inject": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenInjection"
            }
          ],
          "default": {
            "location": "header",
            "key": "Authorization",
            "prefix": "Bearer ",
            "variable": null
          },
          "description": "The injection of the GraphQL query containing the user credentials."
        }
      },
      "required": [
        "users",
        "url",
        "query"
      ],
      "title": "GraphQLPreset",
      "type": "object"
    },
    "GraphQLUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The name of the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The variables of the GraphQL query containing the user credentials.",
          "title": "Variables",
          "type": "object"
        }
      },
      "required": [
        "username",
        "variables"
      ],
      "title": "GraphQLUserPreset",
      "type": "object"
    },
    "HTTPCookie": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "title": "Values",
          "type": "array"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "title": "HTTPCookie",
      "type": "object"
    },
    "HTTPHeader": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "title": "Values",
          "type": "array"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "title": "HTTPHeader",
      "type": "object"
    },
    "HTTPLocation": {
      "enum": [
        "header",
        "cookie",
        "body",
        "query"
      ],
      "title": "HTTPLocation",
      "type": "string"
    },
    "HTTPMethod": {
      "description": "HTTP methods and descriptions\n\nMethods from the following RFCs are all observed:\n\n    * RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616\n    * RFC 5789: PATCH Method for HTTP",
      "enum": [
        "CONNECT",
        "DELETE",
        "GET",
        "HEAD",
        "OPTIONS",
        "PATCH",
        "POST",
        "PUT",
        "TRACE"
      ],
      "title": "HTTPMethod",
      "type": "string"
    },
    "HTTPPreset": {
      "_doc": {
        "description": "The 'HTTP' authentication preset is designed to handle authentication via structured HTTP requests:\n\n- **Structured Request**: Authentication is performed through a well-defined HTTP request, including URL, method, headers, cookies, query parameters, and body.\n- **Dynamic Token Management**: The preset handles the extraction of authentication tokens from the HTTP response and subsequently reinjects them into future requests.\n- **User Credentials**: Supports attaching various credentials to each user, such as username, password, headers, cookies, and other request parameters.\n\nThis method is particularly effective in scenarios where authentication is managed via custom HTTP endpoints, requiring precise control over request composition and token handling.",
        "examples": [
          {
            "extract": {
              "key": "accessToken",
              "location": "body"
            },
            "inject": {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer "
            },
            "request": {
              "body": {
                "addtional": "body",
                "for": "authentication"
              },
              "cookies": {},
              "headers": {
                "Content-Type": "application/json"
              },
              "method": "POST",
              "query_parameters": {},
              "url": "https://api.example.com/authenticate"
            },
            "type": "http",
            "users": [
              {
                "body": {
                  "login": "user1",
                  "password": "pass1"
                },
                "cookies": {},
                "headers": {},
                "query_parameters": {},
                "username": "user1"
              },
              {
                "body": {
                  "login": "user2",
                  "password": "pass2"
                },
                "cookies": {
                  "addtional": "cookie"
                },
                "headers": {
                  "addtional": "header"
                },
                "query_parameters": {
                  "addtional": "query param"
                },
                "username": "user2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "HTTP"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "http",
          "default": "http",
          "title": "Type"
        },
        "users": {
          "description": "The list of users to generate tokens for.",
          "items": {
            "$ref": "#/$defs/HTTPUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "request": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPRequestPreset"
            }
          ],
          "description": "The parameters of the HTTP request used to fetch the access and refresh tokens."
        },
        "extract": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenExtraction"
            }
          ],
          "description": "The token extraction configuration used to extract the tokens from the HTTP response.",
          "examples": [
            {
              "key": "Set-Cookie",
              "location": "header",
              "name": "my-variable"
            }
          ]
        },
        "inject": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenInjection"
            }
          ],
          "description": "The injection configuration used to inject the tokens into the HTTP requests.",
          "examples": [
            {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer ",
              "variable": "token"
            }
          ]
        }
      },
      "required": [
        "users",
        "request",
        "extract",
        "inject"
      ],
      "title": "HTTPPreset",
      "type": "object"
    },
    "HTTPQueryParameter": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "title": "Values",
          "type": "array"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "title": "HTTPQueryParameter",
      "type": "object"
    },
    "HTTPRequestParameters": {
      "additionalProperties": false,
      "properties": {
        "url": {
          "description": "The URL to send the request to",
          "title": "Url",
          "type": "string"
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPMethod"
            }
          ],
          "default": "POST",
          "description": "The HTTP method to use",
          "examples": [
            "GET",
            "POST",
            "PUT"
          ]
        },
        "headers": {
          "description": "The list of headers to attach to the request. Headers are merged with the user credentials headers. It is possible to attach mutliple values to a header.",
          "examples": [
            {
              "name": "Authorization",
              "values": [
                "Bearer my-token"
              ]
            },
            {
              "name": "my-header",
              "values": [
                "value1",
                "value2"
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPHeader"
          },
          "title": "Headers",
          "type": "array"
        },
        "cookies": {
          "description": "The list of cookies to attach to the request. Cookies are merged with the user credentials cookies. It is possible to attach mutliple values to a cookie. Cookie values are url-encoded before being sent.",
          "examples": [
            {
              "name": "PHPSESSIONID",
              "values": [
                "my-session-id"
              ]
            },
            {
              "name": "my-cookie",
              "values": [
                "value1",
                "value2"
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPCookie"
          },
          "title": "Cookies",
          "type": "array"
        },
        "query_parameters": {
          "description": "The list of query parameters to attach to the request. Query parameters are merged with the user credentials query parameters. It is possible to attach mutliple values to a query parameter. Query parameter values are url-encoded before being sent.",
          "examples": [
            {
              "name": "token",
              "values": [
                "my-token"
              ]
            },
            {
              "name": "scope",
              "values": [
                "read-data",
                "write-data"
              ]
            }
          ],
          "items": {
            "$ref": "#/$defs/HTTPQueryParameter"
          },
          "title": "Query Parameters",
          "type": "array"
        },
        "body": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The body of the request. It can be a string or a JSON object. It is merged with the user credentials body if provided. If bodies of the HTTP request and of the user credentials are both JSON objects, they are merged. If the two bodies are strings, they are concatenated. If the two bodies are of different types, the body of the user credentials is used instead of this value.",
          "examples": [
            "my body",
            {
              "key1": "value1",
              "key2": "value2"
            },
            12345
          ],
          "title": "Body"
        },
        "proxy": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An eventual proxy used for this request",
          "examples": [
            "http://my-proxy:8080"
          ],
          "title": "Proxy"
        }
      },
      "required": [
        "url"
      ],
      "title": "HTTPRequestParameters",
      "type": "object"
    },
    "HTTPRequestPreset": {
      "properties": {
        "url": {
          "description": "The URL to send the request to",
          "title": "Url",
          "type": "string"
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPMethod"
            }
          ],
          "default": "POST",
          "description": "The HTTP method to use",
          "examples": [
            "GET",
            "POST",
            "PUT"
          ]
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of headers to attach to the request. Headers are merged with the user credentials headers. It is possible to attach mutliple values to a header.",
          "examples": [
            {
              "Authorization": "Bearer my-global-token",
              "my-header": "global-value"
            }
          ],
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of cookies to attach to the request. Cookies are merged with the user credentials cookies. It is possible to attach mutliple values to a cookie. Cookie values are url-encoded before being sent.",
          "examples": [
            {
              "PHPSESSIONID": "my-global-php-session-id"
            }
          ],
          "title": "Cookies"
        },
        "query_parameters": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "The list of query parameters to attach to the request. Query parameters are merged with the user credentials query parameters. It is possible to attach mutliple values to a query parameter. Query parameter values are url-encoded before being sent.",
          "examples": [
            {
              "sessionId": "my-global-session-id"
            }
          ],
          "title": "Query Parameters"
        },
        "body": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The body of the request. It can be a string or a JSON object. It is merged with the user credentials body if provided. If bodies of the HTTP request and of the user credentials are both JSON objects, they are merged. If the two bodies are strings, they are concatenated. If the two bodies are of different types, the body of the user credentials is used instead of this value.",
          "examples": [
            "my body",
            {
              "key1": "value1",
              "key2": "value2"
            },
            12345
          ],
          "title": "Body"
        }
      },
      "required": [
        "url"
      ],
      "title": "HTTPRequestPreset",
      "type": "object"
    },
    "HTTPRunnerConfiguration": {
      "additionalProperties": false,
      "properties": {
        "tech": {
          "const": "http",
          "default": "http",
          "title": "Tech"
        },
        "parameters": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPRequestParameters"
            }
          ],
          "description": "The parameters of the HTTP request to send. At least a URL and a method must be provided.",
          "examples": [
            {
              "method": "GET",
              "url": "https://my-api.com"
            },
            {
              "body": {
                "key1": "value1",
                "key2": "value2"
              },
              "headers": [
                {
                  "name": "Content-Type",
                  "values": [
                    "application/json"
                  ]
                }
              ],
              "url": "https://my-api.com"
            }
          ]
        },
        "extractions": {
          "description": "The list of extractions to run at the end of the operation.For HTTP operations, variables are extracted from the response.",
          "examples": [
            {
              "key": "Set-Cookie",
              "location": "header",
              "name": "my-variable"
            }
          ],
          "items": {
            "$ref": "#/$defs/TokenExtraction"
          },
          "title": "Extractions",
          "type": "array"
        }
      },
      "required": [
        "parameters"
      ],
      "title": "HTTPRunnerConfiguration",
      "type": "object"
    },
    "HTTPUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "default": null,
          "description": "The username to attach to the HTTP requests sent for this user. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#access_using_credentials_in_the_url",
          "examples": [
            "john"
          ],
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "A dict representing the headers to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "Authorization": "Bearer ..."
            }
          ],
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "A dict representing the cookies to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "PHPSESSIONID": "..."
            }
          ],
          "title": "Cookies"
        },
        "password": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The password to attach to the HTTP requests sent for this user. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#access_using_credentials_in_the_url",
          "examples": [
            "john@password123#"
          ],
          "title": "Password"
        },
        "query_parameters": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "A dict of query parameters to attach to every HTTP requests sent for this user",
          "examples": [
            {
              "sessionId": "..."
            }
          ],
          "title": "Query Parameters"
        },
        "body": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A body to merge with the bodies of every HTTP requests sent for this user",
          "examples": [
            {
              "password": "john@password123#",
              "username": "john"
            },
            "username=john&password=john%40password123%23"
          ],
          "title": "Body"
        }
      },
      "title": "HTTPUserPreset",
      "type": "object"
    },
    "HeadersPreset": {
      "_doc": {
        "description": "The 'Headers' authentication preset is a straightforward, manual authentication method:\n\n- **Manual Token Injection**: Authentication is achieved by manually injecting tokens or credentials into the request headers. No authentication request is necessary.\n- **Static Credentials**: User credentials are static and defined in advance, making setup simple.\n- **Token Expiry Consideration**: A key aspect to consider is that since tokens are manually set, they may expire, necessitating regular manual updates to maintain access.\n\nThis preset is ideal for scenarios where authentication can be handled via predefined headers, but users should be mindful of the need to regularly update tokens or credentials to avoid access issues.",
        "examples": [
          {
            "type": "headers",
            "users": [
              {
                "headers": {
                  "Authorization": "Bearer user1Token"
                },
                "username": "user1"
              },
              {
                "headers": {
                  "Authorization": "Bearer user2Token"
                },
                "username": "user2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "Headers"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "headers",
          "default": "headers",
          "title": "Type"
        },
        "users": {
          "description": "A list of users with basic credentials to create",
          "items": {
            "$ref": "#/$defs/HeadersUserPreset"
          },
          "title": "Users",
          "type": "array"
        }
      },
      "required": [
        "users"
      ],
      "title": "HeadersPreset",
      "type": "object"
    },
    "HeadersUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The name of the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The headers of the user.",
          "title": "Headers",
          "type": "object"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        }
      },
      "required": [
        "username",
        "headers"
      ],
      "title": "HeadersUserPreset",
      "type": "object"
    },
    "OAuthClientCredentialsPreset": {
      "_doc": {
        "description": "The 'OAuth Client Credentials' preset is tailored for authentication using the OAuth 2.0 client credentials grant, ideal for service accounts:\n\n- **OAuth Token Endpoint**: Directs authentication requests to the token endpoint of an OpenID Connect server.\n- **Service Account Credentials**: Utilizes client IDs and secrets to authenticate, representing service accounts rather than individual end-users.\n- **Token Generation**: Designed to obtain access tokens for service accounts without the need for a user's password.\n\nThis preset is particularly effective for scenarios where applications or services themselves need to authenticate, independent of a user's direct involvement.",
        "examples": [
          {
            "type": "oauth_client_credentials",
            "url": "https://oauth.example.com/token",
            "users": [
              {
                "client_id": "serviceClientID1",
                "client_secret": "serviceSecret1",
                "scopes": null,
                "username": "serviceAccount1"
              },
              {
                "client_id": "serviceClientID2",
                "client_secret": "serviceSecret2",
                "scopes": [
                  "create",
                  "delete"
                ],
                "username": "serviceAccount2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "OAuth Client Credentials"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "oauth_client_credentials",
          "default": "oauth_client_credentials",
          "title": "Type"
        },
        "users": {
          "description": "A list of users to create",
          "items": {
            "$ref": "#/$defs/OAuthClientCredentialsUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "url": {
          "description": "The URL of the token endpoint of the OpenIDConnect server",
          "title": "Url",
          "type": "string"
        }
      },
      "required": [
        "users",
        "url"
      ],
      "title": "OAuthClientCredentialsPreset",
      "type": "object"
    },
    "OAuthClientCredentialsUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The arbitrary username given to the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "client_id": {
          "description": "The client ID to use for the OAuth requests",
          "title": "Client Id",
          "type": "string"
        },
        "client_secret": {
          "description": "The client secret to use for the OAuth requests",
          "title": "Client Secret",
          "type": "string"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A list of scopes to request for the user. If not specified, no scopes will be requested.",
          "title": "Scopes"
        }
      },
      "required": [
        "username",
        "client_id",
        "client_secret"
      ],
      "title": "OAuthClientCredentialsUserPreset",
      "type": "object"
    },
    "OAuthUserpassPreset": {
      "_doc": {
        "description": "The 'OAuth User Password' preset is designed for authentication using the OAuth 2.0 framework with user password credentials:\n\n- **OAuth Token Endpoint**: Authentication requests are sent to the specified OAuth token endpoint of an OpenID Connect server.\n- **Client Credentials**: Includes the client ID and client secret for authenticating the OAuth request.\n- **User Password Credentials**: This preset supports the OAuth password grant type, using individual user passwords for token generation.\n\nThis method is suitable for systems that require secure, OAuth-based authentication with user credentials, especially in scenarios where direct user-password-based authentication is preferred.",
        "examples": [
          {
            "client_id": "client123",
            "client_secret": "secretXYZ",
            "type": "oauth_userpass",
            "url": "https://oauth.example.com/token",
            "users": [
              {
                "password": "pass1",
                "scopes": null,
                "username": "user1"
              },
              {
                "password": "pass2",
                "scopes": null,
                "username": "user2"
              },
              {
                "password": "pass3",
                "scopes": [
                  "create",
                  "delete"
                ],
                "username": "user3"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "OAuth User Password"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "oauth_userpass",
          "default": "oauth_userpass",
          "title": "Type"
        },
        "users": {
          "description": "A list of users to create",
          "items": {
            "$ref": "#/$defs/OAuthUserpassUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "url": {
          "description": "The URL of the token endpoint of the OpenIDConnect server",
          "title": "Url",
          "type": "string"
        },
        "client_id": {
          "description": "The client ID to use for the OAuth requests",
          "title": "Client Id",
          "type": "string"
        },
        "client_secret": {
          "description": "The client secret to use for the OAuth requests",
          "title": "Client Secret",
          "type": "string"
        }
      },
      "required": [
        "users",
        "url",
        "client_id",
        "client_secret"
      ],
      "title": "OAuthUserpassPreset",
      "type": "object"
    },
    "OAuthUserpassUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The username of the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "password": {
          "description": "The password of the user.",
          "title": "Password",
          "type": "string"
        },
        "scopes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A list of scopes to request for the user. If not specified, no scopes will be requested.",
          "title": "Scopes"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "title": "OAuthUserpassUserPreset",
      "type": "object"
    },
    "ProcedureConfiguration": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the procedure. It must be unique and is used to reference the procedure in users.",
          "title": "Name",
          "type": "string"
        },
        "operations": {
          "description": "The list of operations executed during the procedure. An operation is a unit transaction, like an HTTP request, or a Selenium script. Operations are ordered, and the variables extracted from an operation can be used in the next operations.",
          "items": {
            "discriminator": {
              "mapping": {
                "digest": "#/$defs/DigestRunnerConfiguration",
                "http": "#/$defs/HTTPRunnerConfiguration",
                "selenium": "#/$defs/SeleniumRunnerConfiguration"
              },
              "propertyName": "tech"
            },
            "oneOf": [
              {
                "$ref": "#/$defs/HTTPRunnerConfiguration"
              },
              {
                "$ref": "#/$defs/SeleniumRunnerConfiguration"
              },
              {
                "$ref": "#/$defs/DigestRunnerConfiguration"
              }
            ]
          },
          "title": "Operations",
          "type": "array"
        },
        "injections": {
          "description": "The list of injections to perform at the end of the procedure. Injections are used to inject the variables extracted from the procedure into the user authentication.",
          "items": {
            "$ref": "#/$defs/TokenInjection"
          },
          "title": "Injections",
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "title": "ProcedureConfiguration",
      "type": "object"
    },
    "SeleniumCommand": {
      "properties": {
        "id": {
          "title": "Id",
          "type": "string"
        },
        "command": {
          "description": "The command of the test.",
          "examples": [
            "open"
          ],
          "title": "Command",
          "type": "string"
        },
        "target": {
          "description": "The target of the test.",
          "examples": [
            "https://example.com"
          ],
          "title": "Target",
          "type": "string"
        },
        "targets": {
          "description": "The targets of the test.",
          "examples": [
            [
              "css",
              "body"
            ]
          ],
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": "Targets",
          "type": "array"
        },
        "value": {
          "description": "The value of the test.",
          "examples": [
            "some-value"
          ],
          "title": "Value",
          "type": "string"
        }
      },
      "required": [
        "id",
        "command",
        "target",
        "targets",
        "value"
      ],
      "title": "SeleniumCommand",
      "type": "object"
    },
    "SeleniumProject": {
      "properties": {
        "tests": {
          "description": "The tests of the Selenium script.",
          "examples": [
            {
              "commands": [
                {
                  "command": "open",
                  "id": "a2b6cac88640424d863182874cbf8ca0",
                  "target": "https://example.com",
                  "targets": [
                    [
                      "css",
                      "body"
                    ]
                  ],
                  "value": ""
                }
              ],
              "id": "a2b6cac88640424d863182874cbf8ca0",
              "name": "test"
            }
          ],
          "items": {
            "$ref": "#/$defs/SeleniumTest"
          },
          "title": "Tests",
          "type": "array"
        }
      },
      "required": [
        "tests"
      ],
      "title": "SeleniumProject",
      "type": "object"
    },
    "SeleniumRunnerConfiguration": {
      "additionalProperties": false,
      "properties": {
        "tech": {
          "const": "selenium",
          "default": "selenium",
          "title": "Tech"
        },
        "parameters": {
          "allOf": [
            {
              "$ref": "#/$defs/SeleniumScriptParameters"
            }
          ],
          "description": "The parameters of the Selenium operation.",
          "examples": [
            {
              "options": {
                "proxy": null,
                "wait_for_seconds": 5
              },
              "project": {
                "tests": [
                  {
                    "commands": [
                      {
                        "command": "open",
                        "id": "a2b6cac88640424d863182874cbf8ca0",
                        "target": "https://example.com",
                        "targets": [
                          [
                            "css",
                            "body"
                          ]
                        ],
                        "value": ""
                      }
                    ],
                    "id": "a2b6cac88640424d863182874cbf8ca0",
                    "name": "test"
                  }
                ]
              }
            }
          ]
        },
        "extractions": {
          "items": {
            "$ref": "#/$defs/TokenExtraction"
          },
          "title": "Extractions",
          "type": "array"
        }
      },
      "required": [
        "parameters",
        "extractions"
      ],
      "title": "SeleniumRunnerConfiguration",
      "type": "object"
    },
    "SeleniumScriptOptions": {
      "additionalProperties": false,
      "properties": {
        "wait_for_seconds": {
          "default": 5,
          "description": "The number of seconds to wait at various steps of the script. For example when waiting for a page to load.",
          "examples": [
            30
          ],
          "title": "Wait For Seconds",
          "type": "integer"
        },
        "proxy": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The proxy used to run the script.",
          "examples": [
            "http://my-proxy:8080"
          ],
          "title": "Proxy"
        }
      },
      "title": "SeleniumScriptOptions",
      "type": "object"
    },
    "SeleniumScriptParameters": {
      "additionalProperties": false,
      "properties": {
        "project": {
          "allOf": [
            {
              "$ref": "#/$defs/SeleniumProject"
            }
          ],
          "description": "The Selenium project used to run the script. It is the one that contains the tests and commands to run. The project script can be generated using the Selenium IDE. See https://www.selenium.dev/selenium-ide/docs/en/introduction/getting-started/",
          "examples": [
            {
              "tests": [
                {
                  "commands": [
                    {
                      "command": "open",
                      "id": "command",
                      "target": "https://example.com",
                      "targets": [
                        [
                          "css",
                          "body"
                        ]
                      ],
                      "value": ""
                    }
                  ],
                  "id": "test",
                  "name": "test"
                }
              ]
            }
          ]
        },
        "options": {
          "allOf": [
            {
              "$ref": "#/$defs/SeleniumScriptOptions"
            }
          ],
          "description": "The options of the Selenium script.",
          "examples": [
            {
              "proxy": "http://my-proxy:8080",
              "wait_for_seconds": 30
            },
            {
              "proxy": null,
              "wait_for_seconds": 5
            }
          ]
        }
      },
      "required": [
        "project",
        "options"
      ],
      "title": "SeleniumScriptParameters",
      "type": "object"
    },
    "SeleniumTest": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "The id of the test.",
          "examples": [
            "a2b6cac88640424d863182874cbf8ca0"
          ],
          "title": "Id",
          "type": "string"
        },
        "name": {
          "description": "The name of the test.",
          "examples": [
            "my-test"
          ],
          "title": "Name",
          "type": "string"
        },
        "commands": {
          "description": "The commands of the test.",
          "examples": [
            {
              "command": "open",
              "id": "a2b6cac88640424d863182874cbf8ca0",
              "target": "https://example.com",
              "targets": [
                [
                  "css",
                  "body"
                ]
              ],
              "value": ""
            }
          ],
          "items": {
            "$ref": "#/$defs/SeleniumCommand"
          },
          "title": "Commands",
          "type": "array"
        }
      },
      "required": [
        "id",
        "name",
        "commands"
      ],
      "title": "SeleniumTest",
      "type": "object"
    },
    "TokenExtraction": {
      "additionalProperties": false,
      "properties": {
        "location": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPLocation"
            }
          ],
          "description": "The location of the HTTP request where the value should be extracted"
        },
        "key": {
          "description": "The key to use for the extracted value, depending on the location",
          "title": "Key",
          "type": "string"
        },
        "regex": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The regex to use to extract the token from the key value. By default the entire value is taken.",
          "title": "Regex"
        },
        "name": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The name of the variable to store the extracted value into",
          "examples": [
            "my-token"
          ],
          "title": "Name"
        }
      },
      "required": [
        "location",
        "key"
      ],
      "title": "TokenExtraction",
      "type": "object"
    },
    "TokenInjection": {
      "additionalProperties": false,
      "properties": {
        "location": {
          "allOf": [
            {
              "$ref": "#/$defs/HTTPLocation"
            }
          ],
          "description": "The location of the HTTP request where the token should be injected"
        },
        "key": {
          "description": "The key to use for the injected token. Its usage depends on the location. For headers, cookies,and query parameters, this key describes the name of the header, cookie or query parameter. For a body location, the key is the field where the token should be injected within the request bodies",
          "examples": [
            "Authorization",
            "sessionId",
            "access_token"
          ],
          "title": "Key",
          "type": "string"
        },
        "prefix": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A prefix to prepend to the token before it is injected",
          "examples": [
            "Bearer "
          ],
          "title": "Prefix"
        },
        "variable": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The name of a variable to retrieve to create the token's value. If not provided, the token will be infered as the first successful extraction of the procedure",
          "title": "Variable"
        }
      },
      "required": [
        "location",
        "key"
      ],
      "title": "TokenInjection",
      "type": "object"
    },
    "User": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the user",
          "title": "Name",
          "type": "string"
        },
        "credentials": {
          "anyOf": [
            {
              "$ref": "#/$defs/Credentials"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A set of HTTP parameters used to customize requests sent for the user."
        },
        "procedure": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The name of the procedure to use to authenticate the user.This name MUST match the `name` field of a procedure in the `procedures` list in the multiauth configuration.",
          "title": "Procedure"
        },
        "variables": {
          "description": "List of variables that will be injected at the beginning of the user's authentication procedure.",
          "items": {
            "$ref": "#/$defs/AuthenticationVariable"
          },
          "title": "Variables",
          "type": "array"
        },
        "refresh": {
          "anyOf": [
            {
              "$ref": "#/$defs/UserRefresh"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An optional refresh procedure to follow for the user."
        }
      },
      "required": [
        "name"
      ],
      "title": "User",
      "type": "object"
    },
    "UserRefresh": {
      "additionalProperties": false,
      "properties": {
        "procedure": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An optional custom procedure to use to refresh the authentication of the user. Defaults to the user procedure if not provided. This name MUST match the `name` field of a procedure in the `procedures` list in the multiauth configuration.",
          "title": "Procedure"
        },
        "session_seconds": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Number of seconds to wait before refreshing the authentication. If not provided, multiauth willtry to infer the session duration from the returned variables",
          "title": "Session Seconds"
        },
        "keep": {
          "default": false,
          "description": "If true, multiauth will keep the current tokens and use a merge of the refreshed authenticationand the current one.",
          "title": "Keep",
          "type": "boolean"
        },
        "credentials": {
          "anyOf": [
            {
              "$ref": "#/$defs/Credentials"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Credentials to use to refresh the authentication. If not provided, the user credentials will be used."
        },
        "variables": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/AuthenticationVariable"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of variables that will be injected at the beginning of the user'srefresh procedure. If not provided, the user's variables will be used instead.",
          "title": "Variables"
        }
      },
      "title": "UserRefresh",
      "type": "object"
    },
    "WebdriverPreset": {
      "_doc": {
        "description": "The 'Webdriver' authentication preset is designed for scenarios where traditional authentication methods are not feasible, and it relies on Selenium-based web automation:\n\n- **Selenium Project Integration**: Utilizes Selenium Projects, created via Selenium IDE, to automate the login process on a web interface.\n- **Dynamic Interaction**: Capable of handling complex login procedures including multi-step forms, CAPTCHAs, and JavaScript-based interactions.\n- **Token Extraction and Injection**: Extracts authentication tokens from the web automation flow and injects them into HTTP requests.\n- **Consideration**: Preferred as a last-resort option due to the overhead and potential fragility of maintaining Selenium scripts.\n\nThis preset is particularly useful when other forms of API-based authentication are not available, requiring direct interaction with web interfaces for authentication.",
        "examples": [
          {
            "extract": {
              "key": "",
              "location": "query",
              "regex": "example-portal.*portal-session-id=([^&]*)"
            },
            "inject": {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer "
            },
            "type": "webdriver",
            "users": [
              {
                "project": {
                  "tests": [
                    {
                      "commands": [
                        {
                          "command": "open",
                          "id": "bb671e84-0d81-40da-92ad-4086ec483f6d",
                          "target": "https://auth.example.com/signin/?return=/setup/payment-types/",
                          "targets": [],
                          "value": ""
                        },
                        {
                          "command": "type",
                          "id": "6406387f-c3bf-453c-8dee-561a548f6c42",
                          "target": "name=username",
                          "targets": [
                            [
                              "name=username",
                              "name"
                            ],
                            [
                              "css=.vd-field:nth-child(1) .vd-input",
                              "css:finder"
                            ],
                            [
                              "xpath=//input[@name='username']",
                              "xpath:attributes"
                            ],
                            [
                              "xpath=//div[@id='react-root']/section/main/div/div/div/div/div/div[2]/form/div/div[2]/input",
                              "xpath:idRelative"
                            ],
                            [
                              "xpath=//input",
                              "xpath:position"
                            ]
                          ],
                          "value": "username@example.com"
                        },
                        {
                          "command": "type",
                          "id": "adf71a06-33cc-4e89-b69b-0e324edaa314",
                          "target": "name=password",
                          "targets": [
                            [
                              "name=password",
                              "name"
                            ],
                            [
                              "css=.vd-field:nth-child(2) .vd-input",
                              "css:finder"
                            ],
                            [
                              "xpath=//input[@name='password']",
                              "xpath:attributes"
                            ],
                            [
                              "xpath=//div[@id='react-root']/section/main/div/div/div/div/div/div[2]/form/div[2]/div[2]/input",
                              "xpath:idRelative"
                            ],
                            [
                              "xpath=//div[2]/div[2]/input",
                              "xpath:position"
                            ]
                          ],
                          "value": "C0mplexPassWord!"
                        },
                        {
                          "command": "click",
                          "id": "0c18a7ca-b347-4402-adf7-18c02b54d326",
                          "target": "name=signin_submit",
                          "targets": [
                            [
                              "name=signin_submit",
                              "name"
                            ],
                            [
                              "css=.vd-btn",
                              "css:finder"
                            ],
                            [
                              "xpath=//button[@name='signin_submit']",
                              "xpath:attributes"
                            ],
                            [
                              "xpath=//div[@id='react-root']/section/main/div/div/div/div/div/div[2]/form/div[3]/button",
                              "xpath:idRelative"
                            ],
                            [
                              "xpath=//button",
                              "xpath:position"
                            ],
                            [
                              "xpath=//button[contains(.,'Sign in')]",
                              "xpath:innerText"
                            ]
                          ],
                          "value": ""
                        },
                        {
                          "command": "wait",
                          "id": "552d7f74-25bf-4213-aba3-b0c5b598f3b9",
                          "target": "request_url_contains=portal-session-id",
                          "targets": [],
                          "value": "30"
                        }
                      ],
                      "id": "aec1dcca-65ca-4e09-82a6-8da7bbddbde0",
                      "name": "Example Selenium Sequence"
                    }
                  ]
                },
                "username": "user"
              }
            ],
            "wait_for_seconds": 30
          }
        ],
        "kind": "preset",
        "title": "Webdriver"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "webdriver",
          "default": "webdriver",
          "title": "Type"
        },
        "users": {
          "description": "The list of users to generate tokens for.",
          "items": {
            "$ref": "#/$defs/WebdriverUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "wait_for_seconds": {
          "default": 5,
          "description": "The number of seconds to wait at various steps of the script. For example when waiting for a page to load.",
          "examples": [
            30
          ],
          "title": "Wait For Seconds",
          "type": "integer"
        },
        "extract": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenExtraction"
            }
          ],
          "description": "The token extraction configuration used to extract the tokens from the HTTP response.",
          "examples": [
            {
              "key": "Set-Cookie",
              "location": "header",
              "name": "my-variable"
            }
          ]
        },
        "inject": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenInjection"
            }
          ],
          "description": "The injection configuration used to inject the tokens into the HTTP requests.",
          "examples": [
            {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer ",
              "variable": "token"
            }
          ]
        }
      },
      "required": [
        "users",
        "extract",
        "inject"
      ],
      "title": "WebdriverPreset",
      "type": "object"
    },
    "WebdriverUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The arbitrary name that identifies the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "project": {
          "allOf": [
            {
              "$ref": "#/$defs/SeleniumProject"
            }
          ],
          "description": "The Selenium project used to run the script. It is the one that contains the tests and commands to run. The project script can be generated using the Selenium IDE. See https://www.selenium.dev/selenium-ide/docs/en/introduction/getting-started/",
          "examples": [
            {
              "tests": [
                {
                  "commands": [
                    {
                      "command": "open",
                      "id": "command",
                      "target": "https://example.com",
                      "targets": [
                        [
                          "css",
                          "body"
                        ]
                      ],
                      "value": ""
                    }
                  ],
                  "id": "test",
                  "name": "test"
                }
              ]
            }
          ]
        }
      },
      "required": [
        "username",
        "project"
      ],
      "title": "WebdriverUserPreset",
      "type": "object"
    },
    "cURLPreset": {
      "_doc": {
        "description": "The 'cURL' authentication preset is designed for dynamic token generation and reuse:\n\n- **cURL Command Parsing**: Parses a cURL command to send an authentication request.\n- **Dynamic Token Extraction**: Extracts the authentication token from the cURL command's HTTP response.\n- **Token Re-injection**: Reinjects the extracted token into subsequent authenticated requests.\n\nThis preset is particularly useful for scenarios where authentication tokens are dynamically generated and need to be efficiently extracted and reused in ongoing requests.\n\nTwo common use cases are:\n- **Bearer JWT Token**: A REST API request that generates a Bearer JWT Token, which is then reinjected into the Authorization header for subsequent requests.\n- **Set-Cookie**: A REST API request that generates a cookie, which is then set in the cookies for subsequent requests.",
        "examples": [
          {
            "extract": {
              "key": "Authorization",
              "location": "header"
            },
            "inject": {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer"
            },
            "type": "curl",
            "users": [
              {
                "curl": "curl -X POST https://api.example.com/auth -d \"username=user1&password=pass1\"",
                "username": "user1"
              }
            ]
          },
          {
            "extract": {
              "key": "Set-Cookie",
              "location": "header",
              "regex": "session_id=(\\S+);"
            },
            "inject": {
              "key": "session_id",
              "location": "cookie",
              "variable": "sessionId"
            },
            "type": "curl",
            "users": [
              {
                "curl": "curl -X POST https://api.example.com/login -d \"username=user2&password=pass2\"",
                "username": "user2"
              }
            ]
          }
        ],
        "kind": "preset",
        "title": "cURL"
      },
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "curl",
          "default": "curl",
          "title": "Type"
        },
        "users": {
          "description": "The list of users to generate tokens for.",
          "items": {
            "$ref": "#/$defs/cURLUserPreset"
          },
          "title": "Users",
          "type": "array"
        },
        "extract": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenExtraction"
            }
          ],
          "description": "The token extraction configuration used to extract the tokens from the HTTP response.",
          "examples": [
            {
              "key": "Set-Cookie",
              "location": "header",
              "name": "my-variable"
            }
          ]
        },
        "inject": {
          "allOf": [
            {
              "$ref": "#/$defs/TokenInjection"
            }
          ],
          "description": "The injection configuration used to inject the tokens into the HTTP requests.",
          "examples": [
            {
              "key": "Authorization",
              "location": "header",
              "prefix": "Bearer ",
              "variable": "token"
            }
          ]
        }
      },
      "required": [
        "users",
        "extract",
        "inject"
      ],
      "title": "cURLPreset",
      "type": "object"
    },
    "cURLUserPreset": {
      "additionalProperties": false,
      "properties": {
        "username": {
          "description": "The arbitrary name that identifies the user.",
          "title": "Username",
          "type": "string"
        },
        "headers": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional headers injected during the authentication process and in authentified requests.",
          "title": "Headers"
        },
        "cookies": {
          "anyOf": [
            {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional cookies injected during the authentication process and in authentified requests.",
          "title": "Cookies"
        },
        "curl": {
          "description": "The curl command that is used to fetch the tokens for this user.",
          "title": "Curl",
          "type": "string"
        }
      },
      "required": [
        "username",
        "curl"
      ],
      "title": "cURLUserPreset",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "Multiauth configuration model.",
  "properties": {
    "$schema": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "The schema of the configuration file",
      "title": "$Schema"
    },
    "procedures": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/ProcedureConfiguration"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "The list of authentication procedures to rely on when authenticating users",
      "title": "Procedures"
    },
    "presets": {
      "anyOf": [
        {
          "items": {
            "discriminator": {
              "mapping": {
                "basic": "#/$defs/BasicPreset",
                "cognito_userpass": "#/$defs/CognitoUserpassPreset",
                "curl": "#/$defs/cURLPreset",
                "digest": "#/$defs/DigestPreset",
                "graphql": "#/$defs/GraphQLPreset",
                "headers": "#/$defs/HeadersPreset",
                "http": "#/$defs/HTTPPreset",
                "oauth_client_credentials": "#/$defs/OAuthClientCredentialsPreset",
                "oauth_userpass": "#/$defs/OAuthUserpassPreset",
                "webdriver": "#/$defs/WebdriverPreset"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/$defs/HTTPPreset"
              },
              {
                "$ref": "#/$defs/OAuthUserpassPreset"
              },
              {
                "$ref": "#/$defs/OAuthClientCredentialsPreset"
              },
              {
                "$ref": "#/$defs/BasicPreset"
              },
              {
                "$ref": "#/$defs/GraphQLPreset"
              },
              {
                "$ref": "#/$defs/DigestPreset"
              },
              {
                "$ref": "#/$defs/CognitoUserpassPreset"
              },
              {
                "$ref": "#/$defs/HeadersPreset"
              },
              {
                "$ref": "#/$defs/cURLPreset"
              },
              {
                "$ref": "#/$defs/WebdriverPreset"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of presets used to easily generate procedures and users automatically following common authentication standards",
      "title": "Presets"
    },
    "users": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/User"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "List of users that multiauth will generate authentications for.",
      "title": "Users"
    },
    "proxy": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "An eventual global proxy used for all HTTP requests",
      "title": "Proxy"
    }
  },
  "title": "MultiauthConfiguration",
  "type": "object"
}